{"version":3,"sources":["counterContainer.js","App.js","serviceWorker.js","counterReducer.js","index.js"],"names":["connect","state","counter","dispatch","className","onClick","type","App","Boolean","window","location","hostname","match","counterReducer","action","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sNA0CeA,eAvCS,SAAAC,GAAK,MAAK,CAChCC,QAASD,KAsCID,EAnCU,SAAC,GAAD,IAAGE,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OACrB,6BACA,yBAAKC,UAAU,iBACf,2BAAIF,IAEJ,yBAAKE,UAAU,iBACf,4BAAQA,UAAU,iBAChBC,QAAS,kBAAMF,EAAS,CAAEG,KAAM,UADlC,OAKA,4BAAQF,UAAU,iBAChBC,QAAS,kBAAMF,EAAS,CAAEG,KAAM,aADlC,OAKA,4BAAQF,UAAU,iBAChBC,QAAS,kBAAMF,EAAS,CAAEG,KAAM,aADlC,QAKA,4BAAQF,UAAU,iBAChBC,QAAS,kBAAMF,EAAS,CAAEG,KAAM,gBADlC,QAKA,4BAAQF,UAAU,QAChBC,QAAS,kBAAMF,EAAS,CAAEG,KAAM,YADlC,2BCtBWC,MARf,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,QCMcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IAiBeC,EAjBQ,WAAwB,IAAvBZ,EAAsB,uDAAd,EAAGa,EAAW,uCAC1C,OAAQA,EAAOR,MACX,IAAK,MACD,OAAOL,EAAQ,EACnB,IAAK,SACD,OAAOA,EAAQ,EACnB,IAAK,SACD,OAAOA,EAAQ,GACnB,IAAK,YACD,OAAOA,EAAQ,GACnB,IAAK,QACD,OAAO,EACX,QACI,OAAOA,I,OCJbc,EAAQC,YACVH,EACAJ,OAAOQ,8BAAgCR,OAAOQ,gCAGlDC,IAASC,OACL,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,SFiHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.da218347.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = state => ({\n  counter: state\n});\n\nconst CounterComponent = ({ counter, dispatch }) => (\n    <div>\n    <div className=\"flexContainer\">\n    <p>{counter}</p>\n    </div>\n    <div className=\"flexContainer\">\n    <button className=\"positivButtons\"\n      onClick={() => dispatch({ type: 'ADD' })}\n    >\n      + 1\n    </button>\n    <button className=\"negativButtons\"\n      onClick={() => dispatch({ type: 'REMOVE' })}\n    >\n      - 1\n    </button>\n    <button className=\"positivButtons\"\n      onClick={() => dispatch({ type: 'ADDTEN' })}\n    >\n      + 10\n    </button>\n    <button className=\"negativButtons\"\n      onClick={() => dispatch({ type: 'REMOVETEN' })}\n    >\n      - 10\n    </button>\n    <button className=\"reset\"\n      onClick={() => dispatch({ type: 'RESET' })}\n    >\n      RESET ðŸ˜­\n    </button>\n  </div>\n  </div>\n);\n\nexport default connect(\n  mapStateToProps\n)(CounterComponent);\n","import React from 'react';\nimport CounterContainer from './counterContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CounterContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const counterReducer = (state = 0, action) => {\n    switch (action.type) {\n        case 'ADD':\n            return state + 1;\n        case 'REMOVE':\n            return state - 1;\n        case 'ADDTEN':\n            return state + 10;\n        case 'REMOVETEN':\n            return state - 10;\n        case 'RESET':\n            return 0;\n        default:\n            return state;\n    }\n}\n\nexport default counterReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport counterReducer from './counterReducer';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nconst store = createStore(\n    counterReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n\n\n  \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}